// ==UserScript==
// @name Test HTML/CSS highlights
// ==/UserScript==

document.body.insertAdjacentHTML('beforeend', `<div class="foo">
  <p>hello <i>world</i></p>
</div>`);
someElt.insertAdjacentHTML('afterbegin', `\
<hr class="bar">`); // html can appear in second line

var insertPos = 'afterbegin'; // variable also okay, extra spaces okay too
otherElt.insertAdjacentHTML ( insertPos,  `<div style="margin: 1em;">
  hello
</div>`);

GM_addStyle(`
#some-id div {
  color: #FF0000;
  border-bottom: 1px solid gray;
  z-index: 123;
}`);
GM_addStyle(` a { color: pink; }`);

// Greasemonkey v4 style of addStyle
GM.addStyle(` a { color: pink; }`);

someElt.innerHTML = `<span id="bar">
  123 <!-- html comments -->
</span>`;

// highlight arbitrary string template with a inline comment as a hint
const someHTML = /* html */ `\
<br>
  <hr class="acme">`;

let someCSS = /* CSS  */ `.a:visited {
  color: purple;
}`;

// auto detect html-like string template without the hint
const otherHTML = `<div class="bar">
  hello
</div>`;

// plain string support

var uiHtml = '<h1>heading</h1>' +
    '<span id="someId" class="foo">time is: ' + now + '</span>' +
    '  <br>' + // leading spaces okay
    '<br>' +
    '<br/>' +
    "<br />" + // double-quoted string
    "</div  >" + // doesn't complain if there is no opening <div>
    '<img alt="Quotes \'in text\'" src="bar.jpg">'; // handle some escaping quotes well

var dbgMsg = '<-- output'; // doesn't get mistaken as html

// some limitations
//
someElt.innerHTML = "<br class=\" foo\">" +  // does not hanlde some escaping well
             '<div class="' + classToUse + '"></div>' + // doesn't detect if a string begins with a partial tag
             'plain text <hr>'; // doesn't detect if some plain text at the beginning.

console.debug('<dbg> this is some debug statement'); // mistaken as html as the string  starts with a tag

//
// Tests for handling js expression inside a string template,
// especially those with nested string templates.

// Ensure js expression inside tag text content are handled properly
someUi = `<section title='foo'>${someText}<section>`;
someUi =   `<section title='foo'>prefix${someText}suffix<section>`;
someUi =   `<section title='foo'>prefix${someText}<section>`;
someUi =   `<section title='foo'>${someText}suffix<section>`;
someUi = `<section title='foo'>
    ${someText}
<section>`;
// nested string template in tag text
someUi = `<section title='foo'>
    ${someCond ? `true-${someVarValue}`
  : getFalseText()}
<section>`;

// ensure backtick within a JS expression are tokenized as part of the expression,
// rather than incorrectly ending the string template
let someUi = `<section title="${trimLeft(`
  Some title
`)}">Hello World
</section>`);

// works too for backtick in the expression not at the beginning of a token/line.
let someUi = `<section title="${trimLeft(`
  Some title`)}">Hello World
</section>`);

// ensure simple cases work too
let someUi = `<section title="${someTitle}">Hello<section>`;
someUi = `<section title="prefix ${someTitle} suffix">Hello<section>`;
someUi = `<section>${someTextFunc()}<section>`;

// different attribute value quoting styles
someUi = `<section title='${someTitle}'>Hello<section>`;
someUi = `<section id="${someId}" title='${someTitle}'>Hello<section>`;
someUi = `<section id="${someId}" title='${someTitle}' col=${getCol()}>Hello<section>`;

// js expressions in multi-lined attribute value
someUi = `<span title="${someVar}
  ">text content</span>`;

someUi = `<span title="
${someVar}">
  text content</span>`

someUi = `<span title="
  ${someVar}">
  text content</span>`

someUi = `<span title="foo
      ${someVar}  blah">
  text content</span>`

someUi = `<span title="foo
      ${someVar}
  blah">
  text content</span>`

// ensure nested case works too
let someUi = `<section title="${trimLeft(`
  Some title ${foo ? `val1` :`val2
`}
`)}">Hello World
</section>`);

// nested case 2
let someUi = `<section title="${trimLeft(`
  Some title
  ${someExpr()}
`)}">Hello World
</section>`);

// leading blank spaces before inner ending backtick
let someUi = `<section title="${trimLeft(`
  Some title
  ${someExpr()}
  `)}">Hello World
</section>`);

// } inside the expression is treated properly too
let someUi = `<section title="${trimLeft(`
  Some title } the close curly bracket is not mistaken as the ending bracket
<br>other text
`)}">Hello World
</section>`);

someUi = `<section title="${trimLeft(`
  Some title
}
the close curly bracket above (a standalone token) is not mistaken as the ending bracket
<br>other text
`)}">Hello World
</section>`);

const foo = 1;

// works for CSS too
GM_addStyle(`.foo {
  content: "${someContent}";
}`);

GM_addStyle(`.foo {
  content: "${trimBlanks(`
  Some title
`)}";
}

.bar {
  border: 1px solid;
}`);

var end = true;
